
{-
Smalltt: minimal dependent TT implementation, intended as a demo for
high-performance elaboration. This file showcases basic language features and
contains a number of benchmarks. There is an Agda file called "Demo.agda" in
this repo, which mirror the contents of this file, for benchmarking purposes.


Installation, usage:
  - install with "stack install"
  - make sure stack bin directory is on PATH
  - hit "smalltt" in a directory with .stt files

Performance improvements over Coq/Agda should be both in constant factors and,
in many cases, asymptotics.

The asymptotic improvement results from smalltt's ability to efficiently compute
small solutions to metavariables, avoiding both classic exponential
Hindley-Milner blowups and the very frequent quadratic blowups resulting from
dependent type indexing. A simple example for the latter is length-indexed
vectors, where the implicit natural number indices make normal forms of vector
expressions quadratic-sized in the length.

Project is very WIP, implementation is ugly, CLI is crap and error reporting
is currently trash. Printing doesn't disambiguate shadowed names (internally
it's de Bruijn levels). Source locations in errors are also bugged out.

Although there are lots of unimplemented optimizations currently, the system is
already *very* fast. This file is elaborated in 70 ms on my system, and if we
remove the crazier "vecStress" and "t1" definitions, this goes down to *1.5* ms.

I have done preliminary (informal, manual) bechmarking comparing raw evaluation
and conversion performance and asymptotics to Agda. It's a TODO to make it more
complete, automated and also include Coq.

Note: smalltt does not serialize elaboration output, it just generates core
terms for all definitions. In contrast, Agda writes interface files and also
does hash-consing on it. Although we compare apples and oranges, the results are
still informative (with a fair number of out-of-memory vs. instant checking
cases). Also, I don't expect serialization to add much to elaboration time in
smalltt in the future; in particular I'll keep serialization simple and markedly
won't do hash consing (because keeping output small should be the job of
elaboration itself).

The smalltt evaluator seems to be faster than the newest Agda Abstract Machine,
but it's less than half as fast as the fastest AST interpreter which I
previously managed to implement in Haskell, and leaks way more space, so there
is room for improvement. Switching to bytecode from AST would be yet another
large boost.

A particularly nice thing about our system is that the standard, Agda-beating
evaluator is actually the sole default evaluator: there no is separate "slow"
and "fast" evaluator as in Agda and Coq. In particular, in Agda and Coq the
"fast" evaluators are not available for terms which contain unsolved
metavariables, which is a pretty large limitation. In smalltt, the default
evaluator is used everywhere, regardless of metas, and there are no fundamental
limitations which would prevent it from being even faster, or it being based on
bytecode or machine code.

As the current system stands, unification is already remarkably usable but
weaker than in Agda. We just have pattern unification, bidirectional elaboration
and function eta, without pruning or postponing, and we also just ignore
nonlinearity in patterns, following the Coq school of picking the innermost
nonlinear bound variables.

Eventually I would like to have approximate unification parity with Agda, but I
would really prefer to *not* have postponing (a major source of headache), while
also avoiding performance regression.
-}


-- Basics
--------------------------------------------------------------------------------

{-
- There is a distinguished top level scope, local definitions
  can be written like "let x : A = t in u" or "let x = t in u".

- Name shadowing is allowed everywhere.
-}

-- polymorphic identity, A has inferred type U
id : {A} → A → A = λ x. x

-- by default metas are inserted for implicit arguments, but
-- (!) can be used to stop insertion at any point. The (id!) expression
--  has a polymorphic type, {A} → A → A
id2 : {A} → A → A = id (id!)

id3 : {A} → A → A = λ x. id x

-- non-unicode arrow and lambda are usable as well:
id4 : {A} -> A -> A = \x. x

-- explicit id function can be used for type annotation
-- as in Idris
the : (A : _) → A → A = λ _ x. x

-- top-level definition types can be omitted
constTy = {A B} → A → B → A

const : constTy = λ x y. x

-- implicit application follows Agda convention.
namedArgTest  = const {B = U} U
namedArgTest2 = the constTy (λ x y. x) {B = U} U

-- the following has inferred type {B : U} → U → B → U
-- because of (!)
constU = const {U} !


-- Church bools
--------------------------------------------------------------------------------
Bool = (B : U) → B → B → B
true  : Bool = λ _ t f. t
false : Bool = λ _ t f. f


-- Church natural numbers
--------------------------------------------------------------------------------
Nat : U
 = (n : U) → (n → n) → n → n

zero : Nat
 = λ n s z. z

suc : Nat → Nat
 = λ a n s z. s (a n s z)

n2 : Nat = λ n s z. s (s z)
n5 : Nat = λ n s z. s (s (s (s (s z))))

mul : Nat → Nat → Nat
 = λ a b n s z. a n (b n s) z

add : Nat → Nat → Nat
 = λ a b n s z. a n s (b n s z)

n10   = mul n2 n5
n100  = mul n10 n10
n10k  = mul n100 n100
n10kb = mul n100 (mul n10 n10)
n1M   = mul n10k n100
n1Mb  = mul n100 n10k
n10M  = mul n1M n10
n10Mb = mul n10 n1M


-- Church lists
--------------------------------------------------------------------------------
List  : U → U = λ a. (l : U) → (a → l → l) → l → l
lnil  : {a} → List a = λ l c n. n
lcons : {a} → a → List a → List a = λ a as l c n. c a (as l c n)

list1 = lcons true (lcons false (lcons false lnil))

map : {a b} → (a → b) → List a → List b
 = λ f as l c. as l (λ a. c (f a))


-- Church vectors
--------------------------------------------------------------------------------
Vec : U → Nat → U
 = λ a n. (V : Nat → U) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 = λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 = λ a as V n c. c a (as V n c)

vec1 = vcons true (vcons false (vcons true vnil))


-- Type checking vecStress in smalltt and Agda:
-- smalltt : 6ms, 7 Mb RAM
-- Agda    : ~3s, 330 Mb RAM
vecStress =
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true (vcons true (vcons true (vcons true (vcons true
   (vcons true (vcons true
   vnil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
   )))))))))))))))))))


-- Leibniz (Church) propositional equality, useful for testing conversion.
-- Also note the implicit lambdas.
----------------------------------------------------------------------------------
Eq : {A} → A → A → U
 = λ {A} x y. (P : A → U) → P x → P y

refl : {A}{x : A} → Eq x x
 = λ P px. px

trans : {A}{x y z : A} → Eq x y → Eq y z → Eq x z
 = λ {x = x} p q. q _ p

sym : {A}{x y : A} → Eq x y → Eq y x
 = λ {x = x}{y} p. p (λ y. Eq y x) refl

ap : {A B}(f : A → B){x y : A} → Eq x y → Eq (f x) (f y)
 = λ f {x}{y} p. p (λ y. Eq (f x) (f y)) refl


-- Pairs, Top, Bot
--------------------------------------------------------------------------------
Pair : U → U → U
 = λ A B. (Pair : U)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 = λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 = λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 = λ p. p _ (λ x y. y)

Top : U
 = (Top : U)(tt : Top) → Top

tt : Top
 = λ Top tt. tt

Bot : U
 = (Bot : U) → Bot


-- Dependent function composition (higher-order unification example)
--------------------------------------------------------------------------------

comp :
  {A}
  {B : A → U}
  {C : {a} → B a → U}
  (f : {a}(b : B a) → C b)
  (g : (a : A) → B a)
  (x : A)
  → C (g x)
 = λ f g a. f (g a)

compTest1 : Nat → Nat
 = comp suc suc

compTest2 : {m A} → A → Vec A m → Vec A (suc (suc m))
 = λ a. comp (vcons a) (vcons a)


-- Some stress tests
--------------------------------------------------------------------------------

-- computing an N-sized function type for testing purposes
nfun : Nat → U
 = λ n. n U (λ A. U → A) U

-- Test for syntactic equality check, i.e. the ability to tell that some
-- expressions are equal without actually reducing them.  For some reason, Agda
-- 2.6.0-sept fails the test below with out-of-memory, although this is perhaps
-- a bug because Agda should generally have adequate syntactic eq. checking.
synEqtest1 : nfun n10k → nfun n10k = λ x. x


-- Classic example for exponential-time Hindley-Milner checking.
-- Surprisingly, Agda-2.6.0 (2018 sept) manages this fine. When I
-- previously checked in 2018 january, Agda, Coq and GHC all failed this.
idStress : {A} → A → A
 = id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

-- However, the following other classic exponential Hindley-Milner example kills
-- Agda, while smalltt checks it merrily.
pairStress : Top
 = let x0  = pair tt  tt  in
   let x1  = pair x0  x0  in
   let x2  = pair x1  x1  in
   let x3  = pair x2  x2  in
   let x4  = pair x3  x3  in
   let x5  = pair x4  x4  in
   let x6  = pair x5  x5  in
   let x7  = pair x6  x6  in
   let x8  = pair x7  x7  in
   let x9  = pair x8  x8  in
   let x10 = pair x9  x9  in
   let x11 = pair x10 x10 in
   let x12 = pair x11 x11 in
   let x13 = pair x12 x12 in
   let x14 = pair x13 x13 in
   let x15 = pair x14 x14 in
   let x16 = pair x15 x15 in
   let x17 = pair x16 x16 in
   let x18 = pair x17 x17 in
   let x19 = pair x18 x18 in
   let x20 = pair x19 x19 in
   tt

-- A simple way to force a Church Nat.
forceNat : Nat → U
 = λ n. n U (λ x. x) U

-- simple test of raw compute performance
--   (you can normalize in smalltt with :n computeTest)

-- smalltt :  0.9s , constant space (no discernible RAM hike)
-- Agda    : ~5.5s , ~700 Mb
computeTest = forceNat n10M


-- Conversion checking tests (uncomment benchmarks as you like)
--------------------------------------------------------------------------------


-- smalltt: 0.4s, constant space
-- Agda   : 4.5s, 1.5 Gb RAM

-- convTest1 : Eq n1M n1Mb
--  = refl


-- smalltt: 4s, constant space
-- Agda   : out of memory

-- convTest2 : Eq n10M n10Mb
--  = refl


-- smalltt: 1.3s, 1.2 Gb RAM
-- Agda   : 9s  , 3.8 Gb RAM

-- convTest3 : Eq (nfun n1M) (nfun n1Mb)
--   = refl


-- Conversion checking in the presence of metas: note that Agda dies while
-- smalltt performance is unchanged.

-- smalltt: 0.4s, constant space
-- Agda   : out of memory
-- convTest4 : Eq n1M (add n1Mb _)
--  = refl



-- Church-coded simply typed lambda calculus
--------------------------------------------------------------------------------

Ty : U
 = (Ty  : U)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 = λ _ ι _. ι

fun : Ty → Ty → Ty
 = λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : U
 = (Con : U)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 = λ Con nil cons. nil

cons : Con → Ty → Con
 = λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → U
 = λ Γ A.
   (Var : Con → Ty → U)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 = λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 = λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → U
 = λ Γ A.
   (Tm  : Con → Ty → U)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 = λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 = λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 = λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)


-- Well-typed interpreter for Church-coded STLC
--------------------------------------------------------------------------------

EvalTy : Ty → U
 = λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → U
 = λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 = λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 = λ t. t (λ Γ A. EvalCon Γ → EvalTy A)
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))


-- Large embedded STLC term
--------------------------------------------------------------------------------

-- smalltt : 63ms , ~constant space (can't see extra space on process monitor)
-- Agda    : ~2.5s, 120 Mb
t1 : Tm nil (fun (fun ι ι) (fun ι ι))
 = lam (lam (
      app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz)) (app (var (vs vz))
     (var vz))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     ))))))))))))))))))))))))))))))))))))))

     ))

-- test evaluation
evalTest = EvalTm t1 tt
